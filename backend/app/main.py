from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse
from .config import settings
from .database import engine, Base
from .routers import components, configurations, categories, accessories
import os
import logging
import time
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –ü–ö API",
    description="API –¥–ª—è –≤–µ–±-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(f"üîµ {request.method} {request.url}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        response = await call_next(request)
        process_time = time.time() - start_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if response.status_code >= 400:
            logger.error(f"üî¥ {request.method} {request.url} - {response.status_code} ({process_time:.3f}s)")
        else:
            logger.info(f"üü¢ {request.method} {request.url} - {response.status_code} ({process_time:.3f}s)")
        
        return response
    except Exception as e:
        process_time = time.time() - start_time
        logger.error(f"üí• {request.method} {request.url} - ERROR ({process_time:.3f}s): {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return JSONResponse(
            status_code=500,
            content={"detail": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}
        )

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è PDF —Ñ–∞–π–ª–æ–≤
os.makedirs(settings.PDF_TEMP_PATH, exist_ok=True)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(categories.router, prefix="/api/v1", tags=["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"])
app.include_router(components.router, prefix="/api/v1", tags=["–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"])
app.include_router(configurations.router, prefix="/api/v1", tags=["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"])
app.include_router(accessories.router, prefix="/api/v1", tags=["–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"])

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
app.include_router(categories.router, tags=["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)"])
app.include_router(components.router, tags=["–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)"])
app.include_router(configurations.router, tags=["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)"])
app.include_router(accessories.router, tags=["–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)"])

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –ü–ö API", 
        "version": "1.0.0",
        "docs": "/docs",
        "redoc": "/redoc"
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "ok", "environment": settings.ENVIRONMENT} 