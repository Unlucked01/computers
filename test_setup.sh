#!/bin/bash

echo "üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –ü–ö..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ docker-compose —Ä–∞–±–æ—Ç–∞–µ—Ç
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose..."
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down -v

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
echo "üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose up -d

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
timeout=60
counter=0
while [ $counter -lt $timeout ]; do
    if docker-compose exec -T db pg_isready -U postgres -d pc_configurator > /dev/null 2>&1; then
        echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!"
        break
    fi
    echo "‚è≥ –ñ–¥–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö... ($counter/$timeout)"
    sleep 2
    counter=$((counter + 2))
done

if [ $counter -ge $timeout ]; then
    echo "‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!"
    docker-compose logs db
    exit 1
fi

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend..."
timeout=120
counter=0
while [ $counter -lt $timeout ]; do
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        echo "‚úÖ Backend –≥–æ—Ç–æ–≤!"
        break
    fi
    echo "‚è≥ –ñ–¥–µ–º backend... ($counter/$timeout)"
    sleep 2
    counter=$((counter + 2))
done

if [ $counter -ge $timeout ]; then
    echo "‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è backend!"
    docker-compose logs backend
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ /health..."
health_response=$(curl -s http://localhost:8000/health)
if echo "$health_response" | grep -q "ok"; then
    echo "‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª: $health_response"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
echo "üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ /api/v1/categories..."
categories_response=$(curl -s http://localhost:8000/api/v1/categories)
if echo "$categories_response" | grep -q "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã"; then
    echo "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    category_count=$(echo "$categories_response" | grep -o '"name"' | wc -l)
    echo "üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $category_count"
else
    echo "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: $categories_response"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ /api/v1/components..."
components_response=$(curl -s "http://localhost:8000/api/v1/components?limit=5")
if echo "$components_response" | grep -q "Intel\|AMD"; then
    echo "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    component_count=$(echo "$components_response" | grep -o '"name"' | wc -l)
    echo "üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ 5): $component_count"
else
    echo "‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: $components_response"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
echo "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ..."
db_categories=$(docker-compose exec -T db psql -U postgres -d pc_configurator -t -c "SELECT COUNT(*) FROM component_categories;" | tr -d ' ')
db_components=$(docker-compose exec -T db psql -U postgres -d pc_configurator -t -c "SELECT COUNT(*) FROM components;" | tr -d ' ')
db_stock=$(docker-compose exec -T db psql -U postgres -d pc_configurator -t -c "SELECT COUNT(*) FROM component_stock;" | tr -d ' ')

echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
echo "   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: $db_categories"
echo "   - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: $db_components"
echo "   - –ó–∞–ø–∏—Å–∏ –æ –Ω–∞–ª–∏—á–∏–∏: $db_stock"

if [ "$db_categories" -gt 0 ] && [ "$db_components" -gt 0 ] && [ "$db_stock" -gt 0 ]; then
    echo "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É!"
else
    echo "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –±–∞–∑–µ!"
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ backend:"
docker-compose logs --tail=10 backend

echo ""
echo "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üåê API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000"
echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs"
echo "üîç –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: docker-compose down" 